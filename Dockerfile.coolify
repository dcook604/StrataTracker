# Coolify-optimized Dockerfile for StrataTracker with ClamAV support
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
COPY vite.config.ts ./
COPY tsconfig.server.json ./

# Copy source code
COPY server ./server
COPY shared ./shared
COPY client ./client

# Install dependencies
RUN npm install

# Declare build arguments for Vite environment variables
ARG VITE_SUPABASE_URL
ARG VITE_SUPABASE_ANON_KEY

# Set environment variables from build arguments for Vite build process
ENV VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
ENV VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}

# Debug: Show what environment variables are set (non-blocking)
RUN echo "Build environment check:" || true && \
    echo "VITE_SUPABASE_URL is set: $([ -n "$VITE_SUPABASE_URL" ] && echo 'YES' || echo 'NO')" || true && \
    echo "VITE_SUPABASE_ANON_KEY is set: $([ -n "$VITE_SUPABASE_ANON_KEY" ] && echo 'YES' || echo 'NO')" || true

# Build the application
RUN npm run build

# Production stage with ClamAV support
FROM node:18-alpine AS production

WORKDIR /app

# Install ClamAV and required dependencies
RUN apk update && apk add --no-cache \
    clamav \
    clamav-daemon \
    clamav-libunrar \
    freshclam \
    supervisor \
    curl \
    su-exec \
    netcat-openbsd \
    && rm -rf /var/cache/apk/*

# Create ClamAV and supervisor directories and set permissions
RUN mkdir -p /var/lib/clamav /var/log/clamav /run/clamav /var/run/clamav /var/log/supervisor \
    && chown -R clamav:clamav /var/lib/clamav /var/log/clamav /run/clamav /var/run/clamav

# Copy built application
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/dist ./dist/
COPY --from=builder /app/shared ./shared/
COPY --from=builder /app/node_modules ./node_modules/

# Copy ClamAV configuration files
COPY docker/clamav/clamd.conf /etc/clamav/clamd.conf
COPY docker/clamav/freshclam.conf /etc/clamav/freshclam.conf
COPY docker/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY docker/scripts/init-clamav.sh /usr/local/bin/init-clamav.sh
COPY docker/scripts/health-check.sh /usr/local/bin/health-check.sh

# Make scripts executable
RUN chmod +x /usr/local/bin/init-clamav.sh /usr/local/bin/health-check.sh

# Create necessary directories
RUN mkdir -p /app/uploads /app/logs /app/quarantine && \
    chown -R clamav:clamav /app/quarantine

# Set environment
ENV NODE_ENV=production
ENV PORT=3000
ENV VIRUS_SCANNING_ENABLED=true

# Expose port
EXPOSE 3000

# Health check using the comprehensive script that checks both Node.js and ClamAV
HEALTHCHECK --interval=30s --timeout=15s --start-period=120s --retries=5 \
    CMD /usr/local/bin/health-check.sh

# Use supervisor to manage both Node.js app and ClamAV services
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"] 